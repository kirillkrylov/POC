# Your GitHub workflow file under .github/workflows/
# Trigger the action on push to any branch
on:
  push:
    branches: ['*']
  pull_request:
    types: [opened, synchronize, reopened]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  actions: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "unit-test"
  cancel-in-progress: true
  
jobs:
  run-unit-tests:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
     
      - name: Unit Test NET8
        uses: ./.github/actions/unit-test-n8
        with: 
          build-path: 'C:\CreatioProductBuild\8.3.1.4439_SalesEnterprise_Marketing_ServiceEnterpriseNet8_Softkey_PostgreSQL_ENU'

      - name: Unit Test NetFramework
        uses: ./.github/actions/unit-test-nf
        with:
          build-path: 'C:\CreatioProductBuild\8.3.1.4437_SalesEnterprise_Marketing_ServiceEnterprise_Softkey_PostgreSQL_ENU'

  publish-unit-test-results:
    runs-on: self-hosted
    needs: run-unit-tests
    steps:
      - name: Publish Unit Test Results
        uses: ./.github/actions/report-generator 
  
  
  sonar-qube:
    runs-on: self-hosted
    needs: run-unit-tests
    steps:
      - name: Run SonarQube analysis
        shell: pwsh
        run: |
          $env:CoreLibPath = '..\..\..\.application\net-framework\core-bin';
          $env:TestCoreLibPath = '..\..\.application\net-framework\core-bin';
          $env:TestRelativePkgFolderPath = '..\..\.application\net-framework\packages';
          $env:RelativePkgFolderPath = '..\..\..\.application\net-framework\packages';
          $env:CoreTargetFramework = 'net472';
          
          $projectBaseDir = Join-Path (Get-Location) "packages"
          
          C:\Tools\dotnet-sonarscanner.exe begin `
            /o:"kirillkrylov" `
            /k:"kirillkrylov_POC" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.scanner.scanAll=false `
            /d:sonar.projectBaseDir=$projectBaseDir `
            /d:sonar.cs.opencover.reportsPaths="TestResults/UnitTests/coverage.opencover.nf.xml" `
            /d:sonar.coverage.exclusions="**/Autogenerated/Src/**,**/*.js,**/*.css,**/*.html,**/*.py,**/Playwright-tests/**" `
            /d:sonar.exclusions="./.application/**,./.clio/**,./.git/**,./projects/**,./tasks/**./tests/**,./Playwright-tests/**,**/Autogenerated/Src/**,**/DomainModels/**" `
            /d:sonar.sourceEncoding=UTF-8 `
            /d:sonar.qualitygate.wait=true `
          
          dotnet build ./.solution/CreatioPackages.slns -c Release /nodereuse:false;
          
          C:\Tools\dotnet-sonarscanner.exe end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          